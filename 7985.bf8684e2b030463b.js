"use strict";(self.webpackChunkAngularClient=self.webpackChunkAngularClient||[]).push([[7985],{27985:(g,c,n)=>{n.r(c),n.d(c,{execute:()=>d});var p=n(10467),b=n(5922);function d(o,a){let e=a.responseType;e?"array-buffer"!==e&&"blob"!==e&&"json"!==e&&"native"!==e&&"native-request-init"!==e&&"text"!==e&&(e="text"):e="json",a.responseType=e;const f=a.signal;return delete a.signal,globalThis.invokeStaticMessage("request",{url:o,options:a},{signal:f}).then(function(){var h=(0,p.A)(function*(t){let u,r,i,_,s;if(t.data)if(t.data instanceof ArrayBuffer){if(!("json"!==e&&"text"!==e&&"blob"!==e||(u=new Blob([t.data]),"json"!==e&&"text"!==e||(_=yield u.text(),"json"!==e)))){try{r=JSON.parse(_||null)}catch(l){const m={...l,url:o,requestOptions:a};throw new b.A("request:server",l.message,m)}if(r.error){const l={...r.error,url:o,requestOptions:a};throw new b.A("request:server",r.error.message,l)}}}else"native"===e&&(t.data.signal=f,i=yield fetch(t.data.url,t.data),t.httpStatus=i.status);switch(e){case"blob":s=u;break;case"json":s=r;break;case"native":s=i;break;case"text":s=_;break;default:s=t.data}return{data:s,httpStatus:t.httpStatus,requestOptions:a,ssl:t.ssl,url:o}});return function(t){return h.apply(this,arguments)}}())}}}]);