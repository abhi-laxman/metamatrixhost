"use strict";(self.webpackChunkAngularClient=self.webpackChunkAngularClient||[]).push([[6565],{93327:(I,S,d)=>{d.d(S,{A:()=>x});var P,i=d(8189),A=d(81098),E=d(49976),M=d(71065),R=d(77806),f=d(85211),T=(d(3248),d(35150),d(17221)),v=d(76576),O=d(50305),D=d(32034),N=d(61320),C=d(6434),K=d(29141);const U=new E.J({esriGeometryPoint:"point",esriGeometryMultipoint:"multipoint",esriGeometryPolyline:"polyline",esriGeometryPolygon:"polygon",esriGeometryEnvelope:"extent",mesh:"mesh","":null});let _=P=class extends M.A{constructor(s){super(s),this.displayFieldName=null,this.exceededTransferLimit=!1,this.features=[],this.fields=null,this.geometryType=null,this.hasM=!1,this.hasZ=!1,this.queryGeometry=null,this.spatialReference=null}readFeatures(s,l){return this.readFeaturesWithClass(s,l,A.A)}writeGeometryType(s,l,o,e){if(s)return void U.write(s,l,o,e);const{features:n}=this;if(n)for(const r of n)if(null!=r?.geometry)return void U.write(r.geometry.type,l,o,e)}readQueryGeometry(s,l){if(!s)return null;const o=!!s.spatialReference,e=(0,N.rS)(s);return e&&!o&&l.spatialReference&&(e.spatialReference=D.A.fromJSON(l.spatialReference)),e}writeSpatialReference(s,l){if(s)return void(l.spatialReference=s.toJSON());const{features:o}=this;if(o)for(const e of o)if(e&&null!=e.geometry&&e.geometry.spatialReference)return void(l.spatialReference=e.geometry.spatialReference.toJSON())}clone(){return new P(this.cloneProperties())}cloneProperties(){return(0,R.o8)({displayFieldName:this.displayFieldName,exceededTransferLimit:this.exceededTransferLimit,features:this.features,fields:this.fields,geometryType:this.geometryType,hasM:this.hasM,hasZ:this.hasZ,queryGeometry:this.queryGeometry,spatialReference:this.spatialReference,transform:this.transform})}toJSON(s){const l=this.write();if(l.features&&Array.isArray(s)&&s.length>0)for(let o=0;o<l.features.length;o++){const e=l.features[o];if(e.geometry){const n=s?.[o];e.geometry=n?.toJSON()||e.geometry}}return l}quantize(s){const{scale:[l,o],translate:[e,n]}=s,h=this.features,y=this._getQuantizationFunction(this.geometryType,t=>Math.round((t-e)/l),t=>Math.round((n-t)/o));for(let t=0,u=h.length;t<u;t++)y?.(h[t].geometry)||(h.splice(t,1),t--,u--);return this.transform=s,this}unquantize(){const{geometryType:s,features:l,transform:o}=this;if(!o)return this;const{translate:[e,n],scale:[r,c]}=o;let t=null,u=null;if(this.hasZ&&null!=o?.scale?.[2]){const{translate:[,,m],scale:[,,g]}=o;t=p=>p*g+m}if(this.hasM&&null!=o?.scale?.[3]){const{translate:[,,,m],scale:[,,,g]}=o;u=p=>null==p?p:p*g+m}const a=this._getHydrationFunction(s,m=>m*r+e,m=>n-m*c,t,u);for(const{geometry:m}of l)null!=m&&a&&a(m);return this.transform=null,this}readFeaturesWithClass(s,l,o){const e=D.A.fromJSON(l.spatialReference),n=[];for(let r=0;r<s.length;r++){const c=s[r],h=o.fromJSON(c),y=c.geometry?.spatialReference;null==h.geometry||y||(h.geometry.spatialReference=e);const t=c.aggregateGeometries,u=h.aggregateGeometries;if(t&&null!=u)for(const a in u){const m=u[a],g=t[a],p=g?.spatialReference;null==m||p||(m.spatialReference=e)}n.push(h)}return n}_quantizePoints(s,l,o){let e,n;const r=[];for(let c=0,h=s.length;c<h;c++){const y=s[c];if(c>0){const t=l(y[0]),u=o(y[1]);t===e&&u===n||(r.push([t-e,u-n]),e=t,n=u)}else e=l(y[0]),n=o(y[1]),r.push([e,n])}return r.length>0?r:null}_getQuantizationFunction(s,l,o){return"point"===s?e=>(e.x=l(e.x),e.y=o(e.y),e):"polyline"===s||"polygon"===s?e=>{const n=(0,N.Bi)(e)?e.rings:e.paths,r=[];for(let c=0,h=n.length;c<h;c++){const t=this._quantizePoints(n[c],l,o);t&&r.push(t)}return r.length>0?((0,N.Bi)(e)?e.rings=r:e.paths=r,e):null}:"multipoint"===s?e=>{const n=this._quantizePoints(e.points,l,o);return n&&n.length>0?(e.points=n,e):null}:"extent"===s?e=>e:null}_getHydrationFunction(s,l,o,e,n){return"point"===s?r=>{r.x=l(r.x),r.y=o(r.y),e&&(r.z=e(r.z))}:"polyline"===s||"polygon"===s?r=>{const c=(0,N.Bi)(r)?r.rings:r.paths;let h,y;for(let t=0,u=c.length;t<u;t++){const a=c[t];for(let m=0,g=a.length;m<g;m++){const p=a[m];m>0?(h+=p[0],y+=p[1]):(h=p[0],y=p[1]),p[0]=l(h),p[1]=o(y)}}if(e&&n)for(let t=0,u=c.length;t<u;t++){const a=c[t];for(let m=0,g=a.length;m<g;m++){const p=a[m];p[2]=e(p[2]),p[3]=n(p[3])}}else if(e)for(let t=0,u=c.length;t<u;t++){const a=c[t];for(let m=0,g=a.length;m<g;m++){const p=a[m];p[2]=e(p[2])}}else if(n)for(let t=0,u=c.length;t<u;t++){const a=c[t];for(let m=0,g=a.length;m<g;m++){const p=a[m];p[2]=n(p[2])}}}:"extent"===s?r=>{r.xmin=l(r.xmin),r.ymin=o(r.ymin),r.xmax=l(r.xmax),r.ymax=o(r.ymax),e&&null!=r.zmax&&null!=r.zmin&&(r.zmax=e(r.zmax),r.zmin=e(r.zmin)),n&&null!=r.mmax&&null!=r.mmin&&(r.mmax=n(r.mmax),r.mmin=n(r.mmin))}:"multipoint"===s?r=>{const c=r.points;let h,y;for(let t=0,u=c.length;t<u;t++){const a=c[t];t>0?(h+=a[0],y+=a[1]):(h=a[0],y=a[1]),a[0]=l(h),a[1]=o(y)}if(e&&n)for(let t=0,u=c.length;t<u;t++){const a=c[t];a[2]=e(a[2]),a[3]=n(a[3])}else if(e)for(let t=0,u=c.length;t<u;t++){const a=c[t];a[2]=e(a[2])}else if(n)for(let t=0,u=c.length;t<u;t++){const a=c[t];a[2]=n(a[2])}}:null}};(0,i._)([(0,f.MZ)({type:String,json:{write:!0}})],_.prototype,"displayFieldName",void 0),(0,i._)([(0,f.MZ)({type:Boolean,json:{write:{overridePolicy:s=>({enabled:s})}}})],_.prototype,"exceededTransferLimit",void 0),(0,i._)([(0,f.MZ)({type:[A.A],json:{write:!0}})],_.prototype,"features",void 0),(0,i._)([(0,T.w)("features")],_.prototype,"readFeatures",null),(0,i._)([(0,f.MZ)({type:[K.A],json:{write:!0}})],_.prototype,"fields",void 0),(0,i._)([(0,f.MZ)({type:["point","multipoint","polyline","polygon","extent","mesh"],json:{read:{reader:U.read}}})],_.prototype,"geometryType",void 0),(0,i._)([(0,O.K)("geometryType")],_.prototype,"writeGeometryType",null),(0,i._)([(0,f.MZ)({type:Boolean,json:{write:{overridePolicy:s=>({enabled:s})}}})],_.prototype,"hasM",void 0),(0,i._)([(0,f.MZ)({type:Boolean,json:{write:{overridePolicy:s=>({enabled:s})}}})],_.prototype,"hasZ",void 0),(0,i._)([(0,f.MZ)({types:C.yR,json:{write:!0}})],_.prototype,"queryGeometry",void 0),(0,i._)([(0,T.w)("queryGeometry")],_.prototype,"readQueryGeometry",null),(0,i._)([(0,f.MZ)({type:D.A,json:{write:!0}})],_.prototype,"spatialReference",void 0),(0,i._)([(0,O.K)("spatialReference")],_.prototype,"writeSpatialReference",null),(0,i._)([(0,f.MZ)({json:{write:!0}})],_.prototype,"transform",void 0),_=P=(0,i._)([(0,v.$)("esri.rest.support.FeatureSet")],_),_.prototype.toJSON.isDefaultToJSON=!0;const x=_},55151:(I,S,d)=>{d.d(S,{A:()=>O});var i=d(8189),A=d(49976),E=d(71065),M=d(85211),k=(d(3248),d(35150),d(40707),d(76576));const T=new A.J({esriJobMessageTypeInformative:"informative",esriJobMessageTypeProcessDefinition:"process-definition",esriJobMessageTypeProcessStart:"process-start",esriJobMessageTypeProcessStop:"process-stop",esriJobMessageTypeWarning:"warning",esriJobMessageTypeError:"error",esriJobMessageTypeEmpty:"empty",esriJobMessageTypeAbort:"abort"});let v=class extends E.A{constructor(D){super(D),this.description=null,this.type=null}};(0,i._)([(0,M.MZ)({type:String,json:{write:!0}})],v.prototype,"description",void 0),(0,i._)([(0,M.MZ)({type:String,json:{read:T.read,write:T.write}})],v.prototype,"type",void 0),v=(0,i._)([(0,k.$)("esri.rest.support.GPMessage")],v);const O=v},81401:(I,S,d)=>{d.d(S,{$n:()=>e,$r:()=>U,EM:()=>P,Ec:()=>a,JJ:()=>K,Mm:()=>r,OC:()=>h,Sr:()=>T,UO:()=>R,Vj:()=>t,WU:()=>u,Y8:()=>M,Z7:()=>f,_6:()=>l,aJ:()=>k,dd:()=>n,dn:()=>w,et:()=>c,fe:()=>s,gD:()=>o,hE:()=>O,hY:()=>E,iM:()=>x,mt:()=>_,ow:()=>C,vS:()=>y});var i=d(49976);const A={esriCentimeters:"centimeters",esriDecimalDegrees:"decimal-degrees",esriDecimeters:"decimeters",esriFeet:"feet",esriInches:"inches",esriKilometers:"kilometers",esriMeters:"meters",esriMiles:"miles",esriMillimeters:"millimeters",esriNauticalMiles:"nautical-miles",esriPoints:"points",esriUnknownUnits:"unknown",esriYards:"yards"},E=(0,i.O)()(A),M=(0,i.O)()({...A,esriIntFeet:"international-feet",esriIntInches:"international-inches",esriIntMiles:"international-miles",esriIntNauticalMiles:"international-nautical-miles",esriIntYards:"international-yards"}),R=(0,i.O)()({esriAcres:"international-acres",esriAcresUS:"us-acres",esriAres:"ares",esriHectares:"hectares",esriSquareCentimeters:"square-centimeters",esriSquareDecimeters:"square-decimeters",esriSquareFeet:"square-international-feet",esriSquareFeetUS:"square-us-feet",esriSquareInches:"square-international-inches",esriSquareInchesUS:"square-us-inches",esriSquareKilometers:"square-kilometers",esriSquareMeters:"square-meters",esriSquareMiles:"square-international-miles",esriSquareMilesUS:"square-us-miles",esriSquareMillimeters:"square-millimeters",esriSquareYards:"square-international-yards",esriSquareYardsUS:"square-us-yards",esriUnknownAreaUnits:"unknown"}),f=(0,i.O)()({esriNAUCentimeters:"centimeters",esriNAUDecimalDegrees:"decimal-degrees",esriNAUDecimeters:"decimeters",esriNAUFeet:"feet",esriNAUInches:"inches",esriNAUKilometers:"kilometers",esriNAUMeters:"meters",esriNAUMiles:"miles",esriNAUMillimeters:"millimeters",esriNAUNauticalMiles:"nautical-miles",esriNAUPoints:"points",esriNAUYards:"yards"}),w=(0,i.O)()({esriNAUCentimeters:"centimeters",esriNAUDecimalDegrees:"decimal-degrees",esriNAUDecimeters:"decimeters",esriNAUFeet:"feet",esriNAUInches:"inches",esriNAUKilometers:"kilometers",esriNAUMeters:"meters",esriNAUMiles:"miles",esriNAUMillimeters:"millimeters",esriNAUNauticalMiles:"nautical-miles",esriNAUPoints:"points",esriNAUYards:"yards",esriNAUDays:"days",esriNAUHours:"hours",esriNAUMinutes:"minutes",esriNAUSeconds:"seconds",esriNAUKilometersPerHour:"kilometers-per-hour",esriNAUMilesPerHour:"miles-per-hour",esriNAUUnknown:"unknown"}),k=(0,i.O)()({esriDOTComplete:"complete",esriDOTCompleteNoEvents:"complete-no-events",esriDOTFeatureSets:"featuresets",esriDOTInstructionsOnly:"instructions-only",esriDOTStandard:"standard",esriDOTSummaryOnly:"summary-only"}),T=(0,i.O)()({esriNAOutputLineNone:"none",esriNAOutputLineStraight:"straight",esriNAOutputLineTrueShape:"true-shape",esriNAOutputLineTrueShapeWithMeasure:"true-shape-with-measure"}),O=((0,i.O)()({esriNAOutputPolygonNone:"none",esriNAOutputPolygonSimplified:"simplified",esriNAOutputPolygonDetailed:"detailed"}),(0,i.O)()({esriNFSBAllowBacktrack:"allow-backtrack",esriNFSBAtDeadEndsOnly:"at-dead-ends-only",esriNFSBNoBacktrack:"no-backtrack",esriNFSBAtDeadEndsAndIntersections:"at-dead-ends-and-intersections"})),C=((0,i.O)()({esriNATravelDirectionFromFacility:"from-facility",esriNATravelDirectionToFacility:"to-facility"}),(0,i.O)()({esriNATimeOfDayNotUsed:"not-used",esriNATimeOfDayUseAsStartTime:"start",esriNATimeOfDayUseAsEndTime:"end"}),(0,i.O)()({AUTOMOBILE:"automobile",TRUCK:"truck",WALK:"walk",OTHER:"other"})),K=(0,i.O)()({0:"either-side-of-vehicle",1:"right-side-of-vehicle",2:"left-side-of-vehicle",3:"no-u-turn"},{useNumericKeys:!0}),P=(0,i.O)()({0:"stop",1:"waypoint",2:"break"},{useNumericKeys:!0}),U=(0,i.O)()({0:"ok",1:"not-located",2:"network-element-not-located",3:"element-not-traversable",4:"invalid-field-values",5:"not-reached",6:"time-window-violation",7:"not-located-on-closest"},{useNumericKeys:!0}),_=(0,i.O)()({1:"right",2:"left"},{useNumericKeys:!0}),x=(0,i.O)()({0:"restriction",1:"scaled-cost",2:"added-cost"},{useNumericKeys:!0}),s=(0,i.O)()({0:"permit",1:"restrict"},{useNumericKeys:!0}),l=(0,i.O)()({1:"header",50:"arrive",51:"depart",52:"straight",100:"on-ferry",101:"off-ferry",102:"central-fork",103:"roundabout",104:"u-turn",150:"door",151:"stairs",152:"elevator",153:"escalator",154:"pedestrian-ramp",200:"left-fork",201:"left-ramp",202:"clockwise-roundabout",203:"left-handed-u-turn",204:"bear-left",205:"left-turn",206:"sharp-left",207:"left-turn-and-immediate-left-turn",208:"left-turn-and-immediate-right-turn",300:"right-fork",301:"right-ramp",302:"counter-clockwise-roundabout",303:"right-handed-u-turn",304:"bear-right",305:"right-turn",306:"sharp-right",307:"right-turn-and-immediate-left-turn",308:"right-turn-and-immediate-right-turn",400:"up-elevator",401:"up-escalator",402:"up-stairs",500:"down-elevator",501:"down-escalator",502:"down-stairs",1e3:"general-event",1001:"landmark",1002:"time-zone-change",1003:"traffic-event",1004:"scaled-cost-barrier-event",1005:"boundary-crossing",1006:"restriction-violation",1007:"lane"},{useNumericKeys:!0}),o=(0,i.O)()({0:"unknown",1:"segment",2:"maneuver-segment",3:"restriction-violation",4:"scaled-cost-barrier",5:"heavy-traffic",6:"slow-traffic",7:"moderate-traffic"},{useNumericKeys:!0}),e=(0,i.O)()({"NA Campus":"campus","NA Desktop":"desktop","NA Navigation":"navigation"}),n=(0,i.O)()({Kilometers:"kilometers",Miles:"miles",Meters:"meters"},{ignoreUnknown:!1}),r=(0,i.O)()({Minutes:"minutes",TimeAt1KPH:"time-at-1-kph",TravelTime:"travel-time",TruckMinutes:"truck-minutes",TruckTravelTime:"truck-travel-time",WalkTime:"walk-time"},{ignoreUnknown:!1}),c=(0,i.O)()({Kilometers:"kilometers",Miles:"miles",Meters:"meters",Minutes:"minutes",TimeAt1KPH:"time-at-1-kph",TravelTime:"travel-time",TruckMinutes:"truck-minutes",TruckTravelTime:"truck-travel-time",WalkTime:"walk-time"},{ignoreUnknown:!1}),h=(0,i.O)()({"Any Hazmat Prohibited":"any-hazmat-prohibited","Avoid Carpool Roads":"avoid-carpool-roads","Avoid Express Lanes":"avoid-express-lanes","Avoid Ferries":"avoid-ferries","Avoid Gates":"avoid-gates","Avoid Limited Access Roads":"avoid-limited-access-roads","Avoid Private Roads":"avoid-private-roads","Avoid Roads Unsuitable for Pedestrians":"avoid-roads-unsuitable-for-pedestrians","Avoid Stairways":"avoid-stairways","Avoid Toll Roads":"avoid-toll-roads","Avoid Toll Roads for Trucks":"avoid-toll-roads-for-trucks","Avoid Truck Restricted Roads":"avoid-truck-restricted-roads","Avoid Unpaved Roads":"avoid-unpaved-roads","Axle Count Restriction":"axle-count-restriction","Driving a Bus":"driving-a-bus","Driving a Taxi":"driving-a-taxi","Driving a Truck":"driving-a-truck","Driving an Automobile":"driving-an-automobile","Driving an Emergency Vehicle":"driving-an-emergency-vehicle","Height Restriction":"height-restriction","Kingpin to Rear Axle Length Restriction":"kingpin-to-rear-axle-length-restriction","Length Restriction":"length-restriction","Preferred for Pedestrians":"preferred-for-pedestrians","Riding a Motorcycle":"riding-a-motorcycle","Roads Under Construction Prohibited":"roads-under-construction-prohibited","Semi or Tractor with One or More Trailers Prohibited":"semi-or-tractor-with-one-or-more-trailers-prohibited","Single Axle Vehicles Prohibited":"single-axle-vehicles-prohibited","Tandem Axle Vehicles Prohibited":"tandem-axle-vehicles-prohibited","Through Traffic Prohibited":"through-traffic-prohibited","Truck with Trailers Restriction":"truck-with-trailers-restriction","Use Preferred Hazmat Routes":"use-preferred-hazmat-routes","Use Preferred Truck Routes":"use-preferred-truck-routes",Walking:"walking","Weight Restriction":"weight-restriction"},{ignoreUnknown:!1}),y=(0,i.O)()({esriSpatialRelIntersects:"intersects",esriSpatialRelContains:"contains",esriSpatialRelCrosses:"crosses",esriSpatialRelEnvelopeIntersects:"envelope-intersects",esriSpatialRelIndexIntersects:"index-intersects",esriSpatialRelOverlaps:"overlaps",esriSpatialRelTouches:"touches",esriSpatialRelWithin:"within",esriSpatialRelRelation:"relation"}),t=(0,i.O)()({esriGeometryPoint:"point",esriGeometryPolyline:"polyline",esriGeometryPolygon:"polygon",esriGeometryEnvelope:"envelope",esriGeometryMultipoint:"multipoint"}),u=(0,i.O)()({esriNAUTCost:"cost",esriNAUTDescriptor:"descriptor",esriNAUTRestriction:"restriction",esriNAUTHierarchy:"hierarchy"}),a=(0,i.O)()({esriDSTAltName:"alt-name",esriDSTArrive:"arrive",esriDSTBranch:"branch",esriDSTCrossStreet:"cross-street",esriDSTCumulativeLength:"cumulative-length",esriDSTDepart:"depart",esriDSTEstimatedArrivalTime:"estimated-arrival-time",esriDSTExit:"exit",esriDSTGeneral:"general",esriDSTLength:"length",esriDSTServiceTime:"service-time",esriDSTStreetName:"street-name",esriDSTSummary:"summary",esriDSTTime:"time",esriDSTTimeWindow:"time-window",esriDSTToward:"toward",esriDSTViolationTime:"violation-time",esriDSTWaitTime:"wait-time"})}}]);